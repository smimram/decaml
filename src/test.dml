let n = type

let u = ()

let ten = 10

let id_nat (x : nat) = x

let id_nat : nat -> nat = fun x -> x

let id (a : type) (x : a) = x

let n = id nat 2

let n = id _ 2

let id {a : type} (x : a) = x

let n = id 2

let list : type -> type = fun a -> (l : type) -> (a -> l -> l) -> l -> l
let nil : {a} -> list a = fun l cons nil -> nil
let cons : {a} -> a -> list a -> list a = fun x xs L cons nil -> cons x (xs L cons nil)
let map : {a b} -> (a -> b) -> list a -> list b = fun {a} {b} f xs l c n -> xs l (fun a -> c (f a)) n
let list0 : list nat = nil
let list1 : list nat = cons 0 (cons 1 (cons 2 nil))

let rec bot = bot

(*
Local Variables: 
mode: tuareg
End:
*)
